<div class="breaker-panel-column">
    @if (isLoading)
    {
        <span>Loading</span>
    } else if (Breakers == null || Breakers.Any() == false)
    {
        <span>No Breakers</span>
    } else
    {
        foreach (var breaker in Breakers)
        {
            if (ShowLabels)
            {
                @if (breaker.Type == Models.CircuitBreakerInstance.BreakerTypes.DoublePole)
                {
                    <label>
                        <span>@(breaker.Label)</span>
                    </label>
                    <label>
                        <span>@(breaker.Label)</span>
                    </label>
                } else if (breaker.Type == Models.CircuitBreakerInstance.BreakerTypes.DoubleCircuit)
                {
                    string[] parts = breaker.Label.Split('\n', StringSplitOptions.RemoveEmptyEntries);
                    <label>
                        @foreach (var part in parts)
                        {
                            <span>@(part)</span>
                        }
                    </label>
                } else
                {
                    <label>
                        <span>@(breaker.Label)</span>
                    </label>
                }
            } else
            {
                <Breaker BreakerSwitch="breaker" OnBreakerClicked="OnBreakerClicked" />
            }
        }
    }
</div>
@code {
    private bool isLoading = true;

    [Parameter]
    public IEnumerable<Models.CircuitBreakerInstance.Breaker> Breakers { get; set; }

    [Parameter]
    public bool ShowLabels { get; set; } = false;

    [Parameter]
    public EventCallback<Models.CircuitBreakerInstance.Breaker> OnBreakerClicked { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        isLoading = false;
    }
}
