<div class="my-2">
    <label for="txtLabel" class="form-label">Notes:</label>
    <div class="input-group">
        <textarea id="txtLabel" @ref="LabelInput" class="form-control" rows="3" value="@(Breaker.Label)" @onchange="OnLabelChanged" />
    </div>
</div>
<div class="my-2">
    <label for="txtAmps" class="form-label">Amperage</label>
    <div class="input-group">
        <input id="txtAmps" type="number" @ref="AmperageInput" min="0" max="240" class="form-control" value="@(Breaker.Amperage)" @onchange="OnAmperageChanged" />
    </div>
</div>
<div class="my-2">
    <label for="selType" class="form-label">Circuit Breaker Type</label>
    <div class="input-group">
        <select class="form-select" id="selType" @ref="TypeInput" @onchange="OnTypeChanged">
            @{
                var options = Enum.GetNames<Models.CircuitBreakerInstance.BreakerTypes>();
                foreach (var option in options)
                {
                    bool isSelected = Breaker.Type.ToString() == option;
                    if (isSelected)
                    {
                        <option value="@(option)" selected>@(option)</option>
                    } else
                    {
                        <option value="@(option)">@(option)</option>
                    }
                }
            }
            <option value="@(nameof(Models.CircuitBreakerInstance.BreakerTypes.Unused))"></option>
        </select>
    </div>
</div>

<hr/>
<div class="d-flex flex-row justify-content-center">
    <button type="button" class="btn btn-danger" @onclick="DeleteClicked">Delete</button>
</div>

@code {
    private ElementReference LabelInput, AmperageInput, TypeInput;

    [Parameter]
    public Models.CircuitBreakerInstance.Breaker Breaker { get; set; }

    [Parameter]
    public Action<Models.CircuitBreakerInstance.Breaker> OnChange { get; set; }

    [Parameter]
    public Action<Models.CircuitBreakerInstance.Breaker> OnDelete { get; set; }

    private async Task DeleteClicked()
    {
        OnDelete(Breaker);
    }

    private async Task OnLabelChanged(EventArgs e)
    {
        string label = await JSRuntime.InvokeAsync<string>("getValue", LabelInput);
        Breaker.Label = label;
        OnChange(Breaker);
    }

    private async Task OnAmperageChanged(EventArgs e)
    {
        string amps = await JSRuntime.InvokeAsync<string>("getValue", AmperageInput);
        if (int.TryParse(amps, out int amperage))
        {
            Breaker.Amperage = amperage;
            OnChange(Breaker);
        }
    }
    private async Task OnTypeChanged(EventArgs e)
    {
        string type = await JSRuntime.InvokeAsync<string>("getValue", TypeInput);
        if (Enum.TryParse<Models.CircuitBreakerInstance.BreakerTypes>(type, out var enumValue))
        {
            Breaker.Type = enumValue;
            OnChange(Breaker);
        }
    }
}
